"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.ValidationError = exports.InvalidCookieSignature = exports.ParseError = exports.NotFoundError = exports.InternalServerError = exports.error = exports.isProduction = exports.ELYSIA_RESPONSE = exports.ERROR_CODE = void 0;
const value_1 = require("@sinclair/typebox/value");
const utils_1 = require("./utils");
// ? Cloudflare worker support
const env = typeof Bun !== 'undefined'
    ? Bun.env
    : typeof process !== 'undefined'
        ? process?.env
        : undefined;
exports.ERROR_CODE = Symbol('ElysiaErrorCode');
exports.ELYSIA_RESPONSE = Symbol('ElysiaResponse');
exports.isProduction = (env?.NODE_ENV ?? env?.ENV) === 'production';
const error = (code, response) => ({
    // @ts-ignore
    [exports.ELYSIA_RESPONSE]: utils_1.StatusMap[code] ?? code,
    response
});
exports.error = error;
class InternalServerError extends Error {
    constructor(message) {
        super(message ?? 'INTERNAL_SERVER_ERROR');
        this.code = 'INTERNAL_SERVER_ERROR';
        this.status = 500;
    }
}
exports.InternalServerError = InternalServerError;
class NotFoundError extends Error {
    constructor(message) {
        super(message ?? 'NOT_FOUND');
        this.code = 'NOT_FOUND';
        this.status = 404;
    }
}
exports.NotFoundError = NotFoundError;
class ParseError extends Error {
    constructor(message) {
        super(message ?? 'PARSE');
        this.code = 'PARSE';
        this.status = 400;
    }
}
exports.ParseError = ParseError;
class InvalidCookieSignature extends Error {
    constructor(key, message) {
        super(message ?? `"${key}" has invalid cookie signature`);
        this.key = key;
        this.code = 'INVALID_COOKIE_SIGNATURE';
        this.status = 400;
    }
}
exports.InvalidCookieSignature = InvalidCookieSignature;
class ValidationError extends Error {
    constructor(type, validator, value) {
        const error = exports.isProduction
            ? undefined
            : 'Errors' in validator
                ? validator.Errors(value).First()
                : value_1.Value.Errors(validator, value).First();
        const customError = error?.schema.error
            ? typeof error.schema.error === 'function'
                ? error.schema.error(type, validator, value)
                : error.schema.error
            : undefined;
        const accessor = error?.path?.slice(1) || 'root';
        let message = '';
        if (customError) {
            message =
                typeof customError === 'object'
                    ? JSON.stringify(customError)
                    : customError + '';
        }
        else if (exports.isProduction) {
            message = JSON.stringify({
                type,
                message: error?.message
            });
        }
        else {
            message = JSON.stringify({
                type,
                at: accessor,
                message: error?.message,
                expected: value_1.Value.Create(
                // @ts-ignore private field
                validator.schema),
                found: value,
                errors: [...validator.Errors(value)]
            }, null, 2);
        }
        super(message);
        this.type = type;
        this.validator = validator;
        this.value = value;
        this.code = 'VALIDATION';
        this.status = 400;
        Object.setPrototypeOf(this, ValidationError.prototype);
    }
    get all() {
        return [...this.validator.Errors(this.value)];
    }
    static simplifyModel(validator) {
        // @ts-ignore
        const model = 'schema' in validator ? validator.schema : validator;
        try {
            return value_1.Value.Create(model);
        }
        catch {
            return model;
        }
    }
    get model() {
        return ValidationError.simplifyModel(this.validator);
    }
    toResponse(headers) {
        return new Response(this.message, {
            status: 400,
            headers
        });
    }
}
exports.ValidationError = ValidationError;
//# sourceMappingURL=error.js.map