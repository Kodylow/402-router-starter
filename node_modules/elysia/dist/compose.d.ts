import { type Elysia } from '.';
import type { TAnySchema } from '@sinclair/typebox';
import type { ComposedHandler, ElysiaConfig, Handler, LifeCycleStore, PreHandler, SchemaValidator, TraceReporter } from './types';
export declare const hasReturn: (fnLiteral: string) => boolean;
export declare const isFnUse: (keyword: string, fnLiteral: string) => boolean;
export declare const hasType: (type: string, schema: TAnySchema) => any;
export declare const hasProperty: (expectedProperty: string, schema: TAnySchema) => boolean | undefined;
export declare const hasTransform: (schema: TAnySchema) => any;
export declare const isAsync: (fn: Function) => boolean;
export declare const composeHandler: ({ path, method, hooks, validator, handler, handleError, definitions, schema, onRequest, config, getReporter, setHeader }: {
    path: string;
    method: string;
    hooks: LifeCycleStore;
    validator: SchemaValidator;
    handler: unknown | Handler<any, any>;
    handleError: Elysia['handleError'];
    definitions?: {} | undefined;
    schema?: {} | undefined;
    onRequest: PreHandler<any, any>[];
    config: ElysiaConfig<any>;
    getReporter: () => TraceReporter;
    setHeader: Object | undefined;
}) => ComposedHandler;
export declare const composeGeneralHandler: (app: Elysia<any, any, any, any, any, any>) => any;
export declare const composeErrorHandler: (app: Elysia<any, any, any, any, any, any>) => any;
