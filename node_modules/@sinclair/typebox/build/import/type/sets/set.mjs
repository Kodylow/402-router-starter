/** Returns true if element S is in the set of T */
// prettier-ignore
export function SetIncludes(T, S) {
    return T.includes(S);
}
/** Returns true if T is a subset of S */
export function SetIsSubset(T, S) {
    return T.every((L) => SetIncludes(S, L));
}
/** Returns a distinct set of elements */
export function SetDistinct(T) {
    return [...new Set(T)];
}
/** Returns the Intersect of the given sets */
export function SetIntersect(T, S) {
    return T.filter((L) => S.includes(L));
}
/** Returns the Union of the given sets */
export function SetUnion(T, S) {
    return [...T, ...S];
}
/** Returns the Complement by omitting elements in T that are in S */
// prettier-ignore
export function SetComplement(T, S) {
    return T.filter(L => !S.includes(L));
}
/** Returns the Intersect of multiple sets */
// prettier-ignore
export function SetIntersectMany(T) {
    return (T.length === 1 ? T[0] : T.reduce((Acc, L) => [...SetIntersect(Acc, L)], []));
}
/** Returns the Union of multiple sets */
export function SetUnionMany(T) {
    return T.reduce((Acc, L) => [...Acc, ...L], []);
}
